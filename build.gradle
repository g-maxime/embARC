plugins {
	id 'java'
	id 'eclipse'
	id 'application'
	id 'distribution'
	id 'com.gradleup.shadow' version '9.1.0'
	id 'org.openjfx.javafxplugin' version '0.1.0'
	id 'org.beryx.jlink' version '3.1.2'  // Add this for better JavaFX packaging
}

application {
    mainClass = 'com.portalmedia.embarc.gui.Main'
}

// GUI Setings
//mainClass = 'com.portalmedia.embarc.gui.Main'

// CLI Settings
//mainClassName = 'com.portalmedia.embarc.cli.Main'

version = '1.4.0'

repositories {
	mavenCentral()
	mavenLocal()
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main']
		}
		resources {
			srcDirs = ['src/main', 'src/resources']
		}
	}
/*
	test {
		java {
			srcDirs = ['src/tests']
		}
		resources {
			srcDir 'tests/resources'
		}
	}
*/
}

javafx {
    version = '21'
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.base', 'javafx.graphics' ]
    configuration = 'implementation'
}

dependencies {
	implementation 'commons-cli:commons-cli:1.10.0'
	implementation 'commons-collections:commons-collections:3.1'
	implementation 'commons-io:commons-io:2.20.0'
	implementation 'commons-lang:commons-lang:2.6'
	implementation 'de.jensd:fontawesomefx:8.9'
	implementation 'javax.activation:activation:1.1.1'
	implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
	implementation 'net.byteseek:byteseek:2.0.3'
	implementation 'net.sf.supercsv:super-csv:2.4.0'
	implementation 'net.sf.trove4j:trove4j:3.0.3'
	implementation 'org.apache.tika:tika-core:3.2.2'
	implementation 'org.controlsfx:controlsfx:11.2.2'
	implementation 'org.dizitart:nitrite:3.1.0'
	//implementation 'org.dizitart:nitrite:4.3.0'
	implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.5'
    implementation 'org.json:json:20250517'
	implementation files('embARC-maj/target/classes')
	implementation 'uk.gov.nationalarchives:droid-core:6.9.4'
	implementation 'uk.gov.nationalarchives:droid-core-interfaces:6.9.4'

	implementation gradleApi()

	implementation 'junit:junit:4.13.2'
}

jar {
	manifest {
		attributes(
			'Main-Class': application.mainClass
		)
	}
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'embARC'
    }
}

shadowJar {
    zip64 = true

    // Merge service files to avoid JavaFX issues
    mergeServiceFiles()
}

task createWindowsExe(type: Exec) {
    dependsOn jar
    doFirst {
        file("${buildDir}/distributions/windows").mkdirs()
    }
    
    commandLine 'jpackage',
        '--input', "${buildDir}/libs",
        '--main-jar', jar.archiveFileName.get(),
        '--main-class', application.mainClass.get(),
        '--type', 'exe',
        '--name', 'embARC',
        '--app-version', version,
        '--dest', "${buildDir}/distributions/windows",
        '--vendor', 'Library of Congress',
        '--description', 'embARC - metadata embedded for archival content',
        '--win-console',  // Shows console window for debugging
        '--win-dir-chooser',  // Allows user to choose installation directory
        '--win-menu',  // Adds to Windows Start Menu
        '--win-shortcut'  // Creates desktop shortcut
        // '--icon', 'src/main/resources/icon.ico'  // TODO: ico
}

task createMacApp(type: Exec) {
    dependsOn jar
    doFirst {
        file("${buildDir}/distributions/macos").mkdirs()
    }
    commandLine 'jpackage', 
        '--input', 'build/libs',
        '--main-jar', jar.archiveFileName.get(),
        '--main-class', application.mainClass.get(),
        '--type', 'dmg',
        '--name', 'embARC',
        '--app-version', version,
        '--dest', "${buildDir}/distributions/macos",
        '--vendor', 'Library of Congress',
        '--description', 'embARC - metadata embedded for archival content'
        // '--icon', 'src/main/resources/icon.icns'  // TODO: icns
}

task writeVersionProperties {
	doLast {
		def file = file("${projectDir}/src/main/resources/version.properties")
		file.text = "version=${version}\n"
	}
}

processResources.dependsOn writeVersionProperties

test {
    systemProperties = ['property': 'value']
}
